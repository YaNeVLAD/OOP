31.05.25
-Масштабирование базы данных
--Решать проблему масштабирования заранее не стоит,
но нужно подготовить систему, к изменениям,
когда начнутся проблемы с базой.

-Виды масштабирования
--Вертикальное
---Когда мы увеличиваем ресурсы системы.
(Оперативная память, процессор, физические носители)
--Горизонтальное
---Когда мы изменяем систему, чтобы она лучше
работала с большими данными.
---Виды горизонтального масштабирования
----Репликация
-----Когда у нас есть приложение, которое использует
несколько баз данных, в одну из которых записывает,
а из других считывает.
-----Можно реализовать на уровне СУБД.
-----При большом количестве слейвов начинает медленно работать
-----CQRS (Command Query Responcibility Segregation)
------Комманды только меняют данные
------Запросы только считывают данные
------Писать можно только в 1 место, которое называется
мастером (мастер нодой) и является источником правды
------Реплики мастера называются слейвы (slave),
туда данные просто копируются данные из мастера
------Механизмы репликации
-------Географическое, когда слейвы разносятся по миру
-------Балансировка нагрузки, когда слейвы нужны для
распределения нагрузки
-----Это повышает отказоустойчивость системы, позволяет
создавать слейвы под разные нужды.
------Виды репликации
-------Один мастей, много слейвов
--------Нет конфликтов, один источник правды
--------Легко подменить слейвов, проще и дешевле
в обслуживании
--------Если упадёт мастер, нужно подменить его
одним из слейвов, а на это уходит время
-------Мастер-Мастер-...
--------Читать и писать могут в любой мастер
--------При падении мастера ничего не нужно менять
--------Сложная реализация и поддержка, конфликты
и не все СУБД поддерживают такую репликацию
--------Каждому мастеру также можно добавить слейвов
---------Гарантия репликации для случая Мастер-Мастер
----------Синхронная, когда транзакции не подтверждаются,
пока данные не распространятся на все мастера.
----------Асинхронная, когда мастер-сервер не ждёт подтверждения,
конфликты решаются на уровне приложения. Выгоднее, когда слейвы
неравномерно быстро работают.
----------Majority, когда у каждого мастера есть n реплик и мы ждём
подтверждение от определённого числа реплик, а не от всех
----------Семисинхронная, когда мастер нода знает, кто сейчас упал
и не будет ждать ответа от упавшей реплики
------Типы репликаций
-------Физический, когда отправляются страницы B+ деревьев или результат запроса. 
Выгодно, когда у нас есть 1 тяжёлые запросы, обновляют мало данных.
При такой схеме запрос выполняется 1 раз. Ошибки с мастера будет распространяться
на всех слейвов. Невозможны асинхронные DDL операции.
-------Логический, когда отправляется сам запрос, а точнее сохранённые
транзакции. Выгодно использовать, когда простые запросы изменяют много данных.
----Секционирование
-----Когда одна таблица является фасадом для нескольких других таблиц, которые
разбиты по смыслу на разные части.
-----Секционировать можно по разным атрибутам сущности для разных сценариев
-----Позволяет размещать большой набор данных.
-----Позволяет размещать секции (партиции) на разных дисках.
-----Позволяет уменьшить размеры индексов
----Шардирование (шардинг)
-----Не работают ключи целостности, внешние ключи. Гарантировать
консистентность данных нужно на уровне приложения.
-----Единственный способ добиться хорошей пропускной способности,
можно масштабировать на дешёвые части.
-----Сложная реализация.
-----Невозможно реализовать на уровне СУБД.
-----Виды шардинга
------Вертикальный
-------Две базы данных содержат разные данные, относящиеся
к одной и той же сущности.
------Горизонтальный
-------Одна структура таблицы, но данные хранятся в разных таблицах.
-------Одна таблица, разнесённая по разным серверам. Можно выбрать
разные правила разнесения по таблицам.
-------При падении шарда, потеря данных будет ограниченной, что может
быть критично или не очень, в зависимости от размера потерянной
части данных.

-Системы обработки данных
--OLTP (Online Transaction Processing)
---Работа с транзакциями.
--OLAP (Online Analytical Processing)
---Аналитика данных. Позволяет добиться многоменрой структуры данных.
(Или Excel табличка)
Позволяет быстро работать с такими данными.
---В них неудобно и долго писать и легко и долго читать, не нагружая
основную систему.
---Для этого используются отдельные базы данных, зачастую
нереляционные.
---Данные переносятся в определённый период времени, реже, чем происходят
записи в таблицу с актуальными данными.