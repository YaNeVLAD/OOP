21.03.25
Основы ООП
Парадигмы программирования:
1) Структурное программирование:
-Последовательное выполнение иструкций
-Явный запрет операции goto
-Ветвление и циклы
2) Процедурное программмирование
-Развивает структурный подход
-Последовательно выполняемые операции собираются в подпрограмммы: процедуры и функции
3) Объектно-ориентированная:
-Описание сущностей с помощью абстрактных объектов и их реализаций
------------------------------------------------------------------
ПРИНЦИПЫ ООП:

Абстракция данных:
-Использование только тех характеристик объекта, которых достаточно чтобы точно описать его в задаче
-Абстракция связывает тип данных с набором операций над ним
Инкапсуляция:
-Способность объекта скрывать своё внутреннее устройство. Класс рассматривается как чёрный ящик
-Класс состоит из интерфейса и реализации. Пользователь взаимодействует только с интерфейсом
-Уменьшает число связей между классами и упрощает их независимую реализацию, модификацию, тестирование.
Наследование:
-КонцепцияЮ при которой новый набор абстрактных данных наследует данные и функциональность существующего типа.
-Способствует повторному использованию кода
-Расширение функционала за счёт добавления новых данных
-Позволяет строить иерархии классов
Полиморфизм:
-Возможность работать с разными объектами через один интерфейс
-Переопределение виртуальных методов класса-родителя (полиморфизм во время выполнения)

Класс:
- Пользовательский тип данных, объединяющего данные и методы их обработки
- Тип, описывающий устройство объекта
Объект:
- Экземпляр класса
Данные объекта:
-Хранят всю необходимую информацию об объекте и формируют его состояние
-По умолчанию данные в классе приватные
Уровни доступа:
--public - доступно всем
--private - доступно внутри класса
--protected - обращаться могут класс и его наследники
Методы:
-Используются для доступа к данным класса
-Функция-член класса, объявленная внутри класса или структуры
-Задают операции, которые можно выполнить над объектом
Методы и состояния класса:
-Состояние формируется членами данных
-Чтобы изменить состоние нужно изменить данные
-Когда объект константный, его состояние нельзя изменить
-Если метод может изменить состояние объекта - его нельзя вызвать для константного объекта
Константные методы:
-Спецификатор const после списка параметров метода
-Внутри этого метода нельзя изменить значение данных класса, нельзя вызывать не константные методы
-Нельзя передать поле класса в функцию, которая принимала бы класс по неконстантной ссылке
Физическая и логическая константность:
Физическая:
-Объект объявлен как const
-Нельзя изменить состояние
Логическая
-Объект неизменчив внешне
-Объект может изменять состояние
Изменчивые данные класса:
Спецификатор mutable:
-Разрешает изменять поле, даже если объект объявлен как const
-Означает, что поле не влияет на наблюдаемое из вне состояние класса
-mutable T;
-mutable используется, чтобы обеспечить логическую константность
-Наблюдаемое состояние должно оставаться неизменным, когда объект меняет внутреннее состояние
-Не нарушайте правила достука к константным объектом
Размещение классов в файлах:
-Объявление в заголовочных файлах
-Реализация в cpp файлах
--Облегчает использование
--Легко найти класс





