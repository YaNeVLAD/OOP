Язык SQL (Structured Quety Language)
Основные функции:
-Организация данных
-Реализация запросов данных по заданным условия
-Корректировка данных
-Управление досутпом к данным
-Организация параллельного использования данных
-Обеспечение целостности данных

Типы применения:
1) Интерактивный
-Ввод команд из консоли и немедленное получение результата
2) Программный
-В программном режиме операторы SQL реализуются либо библиотекой интерфейса программирования приложений (API)
-В приложении текст SQL может формироваться во время выполнения программы

Достоинтсва:
-Широкая распространённость
-Постоая переносимость
-Начисление признанных стандартоов
-Поддержка ведущих комманд
-Ориентация на реляционные СУБД
-Высокоуровневость языка
-Декларативность
-Поддержка архитектуры клиент-сервер
-Возможность динамического изменения структуры данных
-Возможность работы с представлениями данных (View)б
обеспечивающими защиту данных и иох отображения в различных разрезах

Основой языка является 20 операторов:
-Обработка данных(SELECT, INSERT, DELETE, UPDATE)
-Определение данных(CREATE, DROP, ALTER)
-Управление доступом(GRANT, REVOKE)
-Управление транзакциями(COMMIT, ROLLBACK, SAVEPOINT)
--Транзация - операция, которая либо выполняется полностью, либо не выполняется вообще
--Обычно состоит из нескольких простых операций
--В SQL начинается с BEGIN, затем операции, завершается COMMIT или ROLLBACK
-Динамический SQL(DECLARE, OPEN, FETCH, CLOSE, DESCRIBE, PREPARE, EXECUTE)

Выбор оптимальных типов данных:
-Меньше - обычно лучше
-Просто - значит хорошо
-По возможности избегайте NULL
1) Целые числа:
TINYINT, SMALLINT, MEDUIMINT, INT, BIGINT
-Для хранения они используют:
8,       16,       24,        32,  64 
бита дискового пространства
-Хранят значения в диапазоне от -2^(N-1) до 2^(N-1),
где N - количество занимаемых бит
-Можно применять с аттрибутом UNSIGNED
2) Вещественные числа:
FLOAT, DOUBLE
-Занимают
4,     8
байт дискового пространства
3) DECIMAL(precision, scale)
-precision - максимальное количество цифр, которое может хранить число, числа после запятой тоже учитываются
-scale - максимальное количество цифр после запятой
-Хранит числа с фиксированной точностью
-Точнее чем DOUBLE или FLOAT
-Можно заменить на BIGINT для вычислений, т.к. он стабильнее работает
4) Строковые типы данных
CHAR(len) - постоянная длина
VARCHAR(len) - переменная длина
-Если объявить char, то всегда будет заниматься вся длина
-Максимальная длина char = 255 байт
-Максимальная длина varchar = 65535 байт
-VARCHAR помимо своего размера хранит в себе 1(<= 255) или 2(>255) байт своего размера
-CHAR чаще используется для хранения UUID, Паспорта или других данных фиксированной длины
-Если данные, загружаемые в текстовый столбец превышают максимальный размер для этого типа,
то они будут усечены.
-Конечные пробелы данных в столбец не удаляются
-Про сортировке или группировке текстовых столбцов используются только 1024 байта данных,
хотя этот предел может быть увеличен
-Вместо TINYTEXT, TEXT нужно использовать VARCHAR
-При извлечении значения CHAR конечные пробелы удаляются, т.к. заполняет всю длину пробелами
5) BINARY и VARBINARY
-Двоичные строки очень похожы на обычные, но вместо символов хранятся байты
-Эти типы полезны, когда нужно хранить двоичные данные или нужно сравнивать значения
как байты, а не символы
-MYSQL сравнивает BINARY побайтно, в результате двоичное сравнение может оказаться намного проще,
чем сравнение символов, и, как следствие, выполняется быстрее
6) Тестовые типы данных
BLOB, TEXT
-Хранит большие объёмы данных,
BLOB - в двоичном виде
TEXT - в символьном виде
Есть подтипы
TINYBLOB, SMALLBLOB, BLOB, MEDIUMBLOB, LONGBLOB
TINYTEXT, SMALLTEXT, TEXT, MEDIUMBLOB, LONGTEXT, TEXT - синоним SMALLTEXT
255,      65535            16.777.215

-MYSQL сортирует столбцы BLOB и TEXT не так, как столбцы других типов:
она сортирует по первым max_sort_length байтам каждого столбца.
Задаётся серверной переменной
-MYSQL не может индексировать данные этих типов по полной длине и не может использовать
индексы для сортировки
-Можно сохранять картинки в БД, используя BLOB
7) Enum
-Хранит перечислимый набор значений
-Под капотом использует числовые значения
8) Временные данные
DATE, DATETIME, TIMESTAMP, YEAR, TIME
	  8 байт,   4 байт,    
-Форматы:
DATE - YYYY-MM-DD
DATETIME YYYY-MM-DD HH:MM:SS
TIMESTAMP YYYY-MM-DD HH:MM:SS
YEAR YYYY
TIME HH:MM:SS

DATETIME:
-Большой диапазон, большее использует памяти

TIMESTAMP
-Сломается после 19 января 2038 года
-Занимает меньше места, быстрее происходит сравнение дат
9) Битовые типы данных
BIT
-Может хранить до 64 бит
10) JSON данные
-Ну, они есть, но лучше их не использовать
-Можно извлекать данные из запросов
SELECT json_data->'$.designation' FROM json_table

Выбор идентификторов:
-Уникальные поле или комбинация полей, которые служат ссылкой на строку.
1) PRIMARY KEY
- Это поле может быть первичным ключом 
- Чаще всего используют с числами или UUID
- Часто используют с AUTO_INCREMENT для обеспечения автоматического
генерирования нового значения целочисленного типа для новой строки
- UUID - число в 16 байт. Можно преобразовать с помощью UNHEX() и HEX()

Значение по умолчанию:
DEFAULT
-Объявляет начальное значение для столбца

NULL, NOT NULL
- Объявляет что значие может иметь/не может иметь значение NULL