18.04.25
-Статические методы класса
--Обозначаются ключевым словом static
--Снаружи класса можно вызвать через T::Method
--Его нельзя сделать константным
--Внутри такого метода нельзя обращаться к полям класса
--Можно вызывать только статические методы
--Есть доступ к приватным полям и методам
-Статические поля класса
--Общее для всех экземпляров
--Создаётся при запуске программы и уничтожется при завершении
--С с++17 можно объявить внутри h файла с ключевым словом inline

-Виды отношений между классами
--Классы программы создаются и взаимодействуют по определённым правилам
--Знание этих проавил позволяет спроектировать программу ещё до написания кода
--Можно обсудить архитекутру и распределить работу
--Можно распределить работу между разными частями программы

-Ассоциация
--Отношение, при котором один класс знает о другом, но может существовать отдельно от него
--Возможно наличие двусторонней ассоциации
--Реализуется за счёт хранения ссылки или указателя на другой класс
--На диаграмме обозначается в виде линии или стрелочки, в зависимости от того
явяется ли она двусторонней или нет

-Композиция
--В результате композиции мы получаем более сложный составной тип, который
состоит из других типов
--При композиции один объект является частью другого, составного объекта
--При композиции составной объект управляет своими частями
--Часть в один момент времени пренадлежит только одному составному объекту
--При композиции часть не знает о том, в состав каких объектов она входит
--Обозначается на диаграмме с закрашенным ромбиком, который направлен
от части в сторону составного объекта
--Целое не должно отдавать наружу ссылки на свои части

-Агрегация
--Отношение вида часть и целое
--Часть является частью целого
--Часть в один и тот же момент может принадлежать нескольким составным объектам
--Целое не управляет своими частями
--Часть не знает о существовании целого (не должно иметь ссылки или указателя на целое)
--Транзитивность. Ни один из объектов не является прямой или косвенной частью себя
--Реализуется хранением ссылки или указателя на объект, созданный вне класса
--Очень тонкая грань между Ассоциацей

-Зависимость (Dependency)
--Особенности
---Отношение клиент-поставщик, при котором изменения в поставщике могут вызвать
изменения в клиенте (но не наоборот)
---Возникает в случаях:
----Поставщик создаётся внутри метода Клиента
----Поставщик передаётся в метод клиента, который вызывает его методы
----Метод клиента возвращает Поставщика
---Поставщик ничего не знает про клиента
---Зависимость создаёт кратковременную связь между объектами (на время вызова метода)
--Обозначается пунктирной линией со стрелочкой в зависимого объекта
--Зависимости бываю транзитивными