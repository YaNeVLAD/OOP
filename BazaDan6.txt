27.05.25
-Хранение деревьев в базе данных
#--Adjacency List#
---Дополнительный атрибут, который указывает на родителя
---Ещё способ - создать дополнительную сущность в отдельной таблице,
который будет описывать связь элементов в дереве.
------------------------------
folder
-id
-name
-icon

folder_tree_item
-id FK (folder.id)
-parent_id? FK (folder_tree_item.id)
------------------------------
---Плюсы
----Быстрая вставка и простая вставка
----Быстрое извлечение данных всего дерева
----Просто удалять

---Минусы
----Можно найти всех родителей только через рекурсивный запрос
----Извлечь поддерево можно только через рекурсивный запрос
----Сложно удалить поддерево, только через рекурсию

#--Nested Set#
---Каждый элемент хранит левую и правую границу
---Каждый родительский элемент левее всех своих потомков и правее
всех своих потомков.
---Границы родителей всегда шире всех своих потомков
---Корень дерева объемлит все элементы дерева
---Родителя можно определить вычтя из левой границы 1
---Родителя можно найти, по условию что у элемента глубина -1
и левая граница меньше текущей и правая граница больше текущей
------------------------------
folder
-id
-name
-icon

folder_tree_item
-id FK (folder.id)
-left_border
-right_border
-depth
------------------------------
--Плюсы
---Легко извлекать поддерево
---Легко извлекать родителя
---Легко извлекать всех потомков
---Быстро удалять элемент, нужно только поменять всем его
потомкам высоту на -1
---Хорошо подойдёт для систем, где редко вставляются элементы,
но часто читаются и удаляются

--Минусы
---Долго вставлять, т.к. при каждой вставке нужно пересчитывать
границы почти у всех элементов

#--Closure (Замыкание) Table#
---Мы храним все возможные пары узлов, даже узла с самим собой
---На каждую вершину хранится столько записей, сколько у него
дочерних элементов (прямых и косвенных)
------------------------------
folder
-id
-name
-icon

folder_tree_edge
-id FK (folder.id)
-child_id
-length
------------------------------

--Плюсы
---Легко извлекать всех потомков
---Удобно извлекать элементы текущего уровня
---Удобно найти родителя
---Удобно извлекать всех родителей
---Удобно удалять

--Минусы
---При вставке 1 элемента добавляется столько записей,
сколько до него уровней

#--Materialized path (Материализованный путь)#
---Мы храним путь до своего родителя
---Мы нарушаем первую нормальную форму, когда
храним список нод до родителя
------------------------------
folder
-id
-name
-icon

folder_tree_edge
-id FK (folder.id)
-path: String (1/2/3/...) - последним всего id текущего элемета id/
------------------------------

--Плюсы
---Удобно извлекать все элементы одного уровня
---Удобно извлекать всех своих родителей
---Удобно извлекать поддерево
---Легко добавлять новые элементы, не изменяя ничего, кроме родителя
---Легко удалять элементы

--Минусы
---Мы нарушаем первую нормальную форму, когда храним список нод до родителя
---Ограничение на вложенность, нужен индекс для path

-ИТОГО
--Materialized path - номер один, часто и много где используется, 
не смотря на ограниченную вложенность.